from PIL import Image, ImageDraw, ImageFont

def generate_precise_arrow(policy_term, unit_width=50, height=100):
    # Dynamic width
    width = policy_term * unit_width
    arrow_height = height
    arrow_thickness = 30  # Increased thickness
    margin = 60           # Increased margin to prevent clipping
    amber = "#FFBF00"

    # Create image
    img = Image.new("RGB", (width + 2 * margin, arrow_height + 2 * margin), "white")
    draw = ImageDraw.Draw(img)

    # Coordinates
    y_center = arrow_height // 2 + margin
    left = margin
    right = width + margin

    # Draw shaft of the arrow
    draw.line([(left + 30, y_center), (right - 30, y_center)], fill=amber, width=arrow_thickness)

    # Draw slightly oversized arrowheads
    head_size = 25
    draw.polygon([
        (left, y_center),
        (left + head_size, y_center - head_size),
        (left + head_size, y_center + head_size)
    ], fill=amber)

    draw.polygon([
        (right, y_center),
        (right - head_size, y_center - head_size),
        (right - head_size, y_center + head_size)
    ], fill=amber)

    # Load bold font
    try:
        font = ImageFont.truetype("arialbd.ttf", 28)  # Slightly larger and bold
    except:
        font = ImageFont.load_default()

    # Draw numbers centered on the arrow line, avoiding arrowheads
    for i in range(1, policy_term + 1):
        x = margin + i * unit_width - unit_width // 2
        if x < left + head_size + 10 or x > right - head_size - 10:
            continue  # Skip numbers that would overlap arrowheads
        text = str(i)
        text_width, text_height = draw.textsize(text, font=font)
        draw.text((x - text_width // 2, y_center - text_height // 2), text, fill="black", font=font)

    return img

# Example usage
img = generate_precise_arrow(policy_term=20)
img.show()
